cmake_minimum_required(VERSION 3.8)
project(rai_whatisee)

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

# Determine ROS 2 distribution
if(DEFINED ENV{ROS_DISTRO})
  if($ENV{ROS_DISTRO} STREQUAL "humble")
    add_definitions(-DROS_DISTRO_HUMBLE)
  elseif($ENV{ROS_DISTRO} STREQUAL "jazzy")
    add_definitions(-DROS_DISTRO_JAZZY)
  else()
    message(WARNING "Unsupported ROS 2 distribution: $ENV{ROS_DISTRO}. Defaulting to .hpp include.")
  endif()
else()
  message(FATAL_ERROR "ROS_DISTRO environment variable not set. Make sure to source your ROS 2 distribution before compiling.")
endif()

# find dependencies
find_package(ament_cmake REQUIRED)
find_package(rclcpp REQUIRED)
find_package(rai_interfaces REQUIRED)
find_package(std_srvs REQUIRED)
find_package(cv_bridge REQUIRED)
find_package(OpenCV REQUIRED)

add_executable(rai_whatisee_node src/rai_whatisee_node.cpp)
target_include_directories(rai_whatisee_node PUBLIC
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
  $<INSTALL_INTERFACE:include>)
target_compile_features(rai_whatisee_node PUBLIC c_std_99 cxx_std_17)  # Require C99 and C++17
ament_target_dependencies(rai_whatisee_node rclcpp std_srvs rai_interfaces cv_bridge OpenCV)

install(TARGETS rai_whatisee_node
  DESTINATION lib/${PROJECT_NAME})

if(BUILD_TESTING)
  find_package(ament_lint_auto REQUIRED)
  # the following line skips the linter which checks for copyrights
  # comment the line when a copyright and license is added to all source files
  set(ament_cmake_copyright_FOUND TRUE)
  # the following line skips cpplint (only works in a git repo)
  # comment the line when this package is in a git repo and when
  # a copyright and license is added to all source files
  set(ament_cmake_cpplint_FOUND TRUE)
  ament_lint_auto_find_test_dependencies()
endif()

ament_package()
